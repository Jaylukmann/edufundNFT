{"version":3,"sources":["components/Cover.js","components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/wallet/index.js","hooks/useMinterContract.js","hooks/useContract.js","utils/minter.js","components/minter/nft/Add.js","components/minter/nft/Card.js","components/ui/Loader.js","components/minter/nft/index.js","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Cover","name","coverImg","connect","className","style","background","minHeight","maxWidth","src","alt","Button","onClick","catch","e","console","log","variant","href","defaultProps","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","target","Stack","direction","gap","Divider","as","useMinterContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","kit","web3","eth","Contract","useContract","EduFundNFTAbi","EduFundNFTAddress","EduFundNFT","auth","Buffer","from","projectId","toString","client","ipfsHttpClient","host","port","protocol","apiPath","headers","authorization","createFacility","minterContract","performActions","price","description","ipfsImage","properties","defaultAccount","data","JSON","stringify","image","owner","add","added","_price","ethers","utils","parseUnits","String","url","path","methods","send","transaction","uploadFileToWebStorage","Web3Storage","token","process","file","files","put","rootCid","get","res","cid","getFacility","facilities","totalSupply","call","facilityLength","i","nft","Promise","resolve","facility","tokenURI","getNftMeta","meta","getNftOwner","index","tokenId","sold","push","Number","all","ipfsUrl","axios","getContractOwner","fundFacility","buyNFT_to_fund_Edu","value","error","reList","getListPrice","re_ListNFT","TYPE","NEEDS","AddNfts","save","setName","setIpfsImage","setDescription","setPrice","setProperties","show","setShow","handleClose","setPropertiesFunc","trait_type","propertyObject","arr","findIndex","el","oldArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","alert","Label","hidden","map","need","toLowerCase","Footer","disabled","ownerAddress","NftCard","contractOwner","account","reFundFacility","Col","Card","Badge","bg","objectFit","Text","Row","property","Fragment","Loader","role","NftList","setFacilities","loading","setLoading","nftOwner","setNftOwner","getTotalFacility","allFacility","addNft","toast","fund","listAgain","getOwner","Add","xs","sm","lg","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.23e4197b.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n          className=\"d-flex justify-content-center flex-column text-center \"\n          style={{ background: \"#000\", minHeight: \"100vh\" }}\n        >\n          <div className=\"mt-auto text-light mb-5\">\n            <div\n              className=\" ratio ratio-1x1 mx-auto mb-2\"\n              style={{ maxWidth: \"320px\" }}\n            >\n              <img src={coverImg} alt=\"\" />\n            </div>\n            <h1>{name}</h1>\n            <p>Please connect your wallet to continue.</p>\n            <Button\n              onClick={() => connect().catch((e) => console.log(e))}\n              variant=\"outline-light\"\n              className=\"rounded-pill px-3 mt-3\"\n            >\n              Connect Wallet\n            </Button>\n          </div>\n\n          <p className=\"mt-auto text-secondary\">Powered by Celo || Crafted  by Jaylukmann under the auspices of <a href=\"https://dacade.org/\">Dacade</a></p>\n\n        </div>\n    );\n  }\n\n  return null;\n};\n\n\nCover.propTypes = {\n  // props passed into this component\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: '',\n};\n\nexport default Cover;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({address, size, ...rest}) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(size, parseInt(address.slice(2, 10), 16)));\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest} >\n        <div ref={ref} style={{width:`${size}px`,height:`${size}px`}}  />\n    </div>\n  )\n}","import React from \"react\";\r\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\r\nimport { formatBigNumber, truncateAddress } from \"../../utils\";\r\nimport Identicon from \"../ui/Identicon\";\r\n\r\nconst Wallet = ({ address, amount, symbol, destroy }) => {\r\n  if (address) {\r\n    return (\r\n      <>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            variant=\"light\"\r\n            align=\"end\"\r\n            id=\"dropdown-basic\"\r\n            className=\"d-flex align-items-center border rounded-pill py-1\"\r\n          >\r\n            {amount ? (\r\n              <>\r\n                {formatBigNumber(amount)}{\" \"}\r\n                <span className=\"ms-1\"> {symbol}</span>\r\n              </>\r\n            ) : (\r\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n            )}\r\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu className=\"shadow-lg border-0\">\r\n            <Dropdown.Item\r\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\r\n              target=\"_blank\"\r\n            >\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person-circle fs-4\" />\r\n                <span className=\"font-monospace\">\r\n                  {truncateAddress(address)}\r\n                </span>\r\n              </Stack>\r\n            </Dropdown.Item>\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              className=\"d-flex align-items-center\"\r\n              onClick={() => {\r\n                destroy();\r\n              }}\r\n            >\r\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n              Disconnect\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;\r\n","import { useContract } from \"./useContract\";\nimport EduFundNFTAbi from \"../contracts/EduFundNFT.json\";\nimport EduFundNFTAddress from \"../contracts/EduFundNFT-address.json\";\n\n// export interface for smart contract\nexport const useMinterContract = () =>\n  useContract(EduFundNFTAbi.abi, EduFundNFTAddress.EduFundNFT);\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport {Web3Storage} from 'web3.storage/dist/bundle.esm.min.js'\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\nimport { Buffer } from 'buffer';\n\n//initialize IPFS\nconst projectId = process.env.REACT_APP_PROJECT_ID;\nconst projectSecret = process.env.REACT_APP_API_KEY_SECRET ;\nconst auth =\n\t\"Basic \" +\n\tBuffer.from(\n\t\tprojectId +\n\t\t\t\":\" +\n    projectSecret\n\t).toString(\"base64\");\n\nconst client = ipfsHttpClient({\n\thost: \"ipfs.infura.io\",\n\tport: 5001,\n\tprotocol: \"https\",\n\tapiPath: \"/api/v0\",\n\theaders: {\n\t\tauthorization: auth,\n\t},\n});\n\nexport const createFacility = async (\n  minterContract,\n  performActions,\n  { name, price, description, ipfsImage, properties}\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage ) return;\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      price,\n      description,\n      image: ipfsImage,\n      properties,\n      owner: defaultAccount,\n    });\n    \n      // save NFT metadata to IPFS\n      const added = await client.add(data);\n      //IPFS url for uploaded metadata\n      try {\n      const _price = ethers.utils.parseUnits(String(price), \"ether\");\n      const url = `https://infura-ipfs.io/ipfs/${added.path}`\n      \n    \n      // mint the NFT and save the IPFS url to the blockchain\n      let transaction = await minterContract.methods\n        .createFacility(url,_price)\n        .send({ from: defaultAccount });\n      return transaction;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n   });\n };\n\n//function to upload a file to IPFS\nexport const uploadToIpfs = async (file) => {\n\tif (!file) return;\n  try {\n      const cid = await client.add(file, {\n          progress: (prog) => console.log(`Received file now: ${prog}`),\n      });\n      return `https://infura-ipfs.io/ipfs/${cid.path}`;\n  } catch (error) {\n      console.log(\"Error uploading file: \", error);\n  }\n};\n\nexport const uploadFileToWebStorage = async (e) => {\n  // Construct with token and endpoint\n  const client = new Web3Storage({token: process.env.REACT_APP_STORAGE_API_KEY})\n\n  const file = e.target.files;\n  if (!file) return;\n  // Pack files into a CAR and send to web3.storage\n  const rootCid = await client.put(file) // Promise<CIDString>\n\n  // Fetch and verify files from web3.storage\n  const res = await client.get(rootCid) // Promise<Web3Response | null>\n  const files = await res.files() // Promise<Web3File[]>\n\n  return `https://infura-ipfs.io/ipfs/${files[0].cid}`;\n};\n// get the metadata for an NFT from IPFS\nexport const getFacility = async (minterContract) => {\n  try {\n    const facilities = [];\n    const facilityLength = await minterContract.methods.totalSupply().call();\n    for (let i = 1; i <= Number(facilityLength); i++) {\n      const nft = new Promise(async (resolve) => {\n         const facility = await minterContract.methods.getFacility(i).call();\n         console.log(facility);\n        const res = await minterContract.methods.tokenURI(i).call();\n        console.log(res);\n        \n        const meta = await getNftMeta(res);\n        const owner = await getNftOwner(minterContract, i);\n        resolve({\n          index: i,\n          tokenId: i,\n          owner,\n          price: facility.price,\n          sold: facility.sold,\n          name: meta?.data.name,\n          image: meta?.data.image,\n          description: meta?.data.description,\n          properties: meta?.data.properties , \n        });\n      });\n      facilities.push(nft);\n    }\n    return Promise.all(facilities);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n// get all NFTs on the smart contract\nexport const getNftMeta = async (ipfsUrl) => {\n  console.log(ipfsUrl);\n  try {\n    if (!ipfsUrl) return null;\n    const meta = await axios.get(ipfsUrl);\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the owner address of an NFT\nexport const getNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods\n    .getNftOwner(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the address that deployed the NFT contract\nexport const getContractOwner = async (minterContract) => {\n  try {\n    let owner = await minterContract.methods\n    .getContractOwner().call();\n    return owner;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fundFacility = async (\n  minterContract,\n  index,\n  performActions,\n  tokenId\n) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      const facility = await minterContract.methods\n      .getFacility(index).call();\n      await minterContract.methods\n        .buyNFT_to_fund_Edu(tokenId)\n        .send({ from: defaultAccount, value: facility.price });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\n\nexport const reList = async (minterContract, performActions, tokenId) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      const price = await minterContract.methods\n      .getListPrice().call();\n       console.log(price);\n       await minterContract.methods\n        .re_ListNFT(tokenId,price)\n        .send({ from: defaultAccount,value: price });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\n\n","/* eslint-disable react/jsx-filename-extension */\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport {uploadFileToWebStorage} from \"../../../utils/minter\";\r\n\r\n// basic properties that can be added to NFT\r\nconst TYPE = [\"For Basic Schools\", \"For Secondary Schools\",\" For Tertiary Institutions\"];\r\nconst NEEDS = [\"Classrooms\",\"Computers\",\"Furniture\", \"Laboratory\", \"Library\",\"Toilet\",\"Books\",\"Online course Access\",\"Toys\",\"School building\",\"marker board\",\"Interractive board\"];\r\n\r\n\r\nconst AddNfts = ({ save, address }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [ipfsImage, setIpfsImage] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\")\r\n\r\n  //store properties of an NFT\r\n  const [properties, setProperties] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () =>{\r\n   return name && price && ipfsImage && description && properties.length > 1;\r\n  }\r\n      \r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setProperties([]);\r\n  };\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  // add a property to an NFT\r\n  const setPropertiesFunc = (e, trait_type) => {\r\n    const {value} = e.target;\r\n    const propertyObject = {\r\n      trait_type,\r\n      value,\r\n    };\r\n    const arr = properties;\r\n\r\n    // check if property already exists\r\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\r\n\r\n    if (index >= 0) {\r\n\r\n      // update the existing properties\r\n      arr[index] = {\r\n        trait_type,\r\n        value,\r\n      };\r\n      setProperties(arr);\r\n      return;\r\n    }\r\n\r\n    // add a new attribute\r\n    setProperties((oldArray) => [...oldArray, propertyObject]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"dark\"\r\n        className=\"rounded-pill px-0\"\r\n        style={{ width: \"38px\" }}>\r\n        <i className=\"bi bi-plus-square-fill\"></i>\r\n        {/* <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-plus-square-fill\" viewBox=\"0 0 16 16\">\r\n  <path d=\"M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0z\"/>\r\n</svg> */}\r\n      </Button>\r\n\r\n      {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Mint EduFundNFT</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <Form>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name of NFT\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Price\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Price of NFT\"\r\n                onChange={(e) => {\r\n                  setPrice(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                const imageUrl = await uploadFileToWebStorage(e);\r\n                if (!imageUrl) {\r\n                  alert(\"failed to upload image\");\r\n                  return;\r\n                }\r\n                setIpfsImage(imageUrl);\r\n                \r\n              }}\r\n              placeholder=\"EduFund name\"\r\n            ></Form.Control>\r\n            <Form.Label>\r\n              <h5>Properties</h5>\r\n            </Form.Label>\r\n         \r\n\r\n            <Form.Control\r\n              as=\"select\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                setPropertiesFunc(e, \"need\");\r\n              }}\r\n              placeholder=\"Need\"\r\n            >\r\n              <option hidden>Need</option>\r\n              {NEEDS.map((need) => (\r\n                <option\r\n                  key={`need-${need.toLowerCase()}`}\r\n                  value={need.toLowerCase()}\r\n                >\r\n                  {need}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n            <Form.Control\r\n              as=\"select\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                setPropertiesFunc(e, \"type\");\r\n              }}\r\n              placeholder=\"Type\"\r\n            >\r\n              <option hidden>Type</option>\r\n              {TYPE.map((type) => (\r\n                <option\r\n                  key={`type-${type.toLowerCase()}`}\r\n                  value={type.toLowerCase()}\r\n                >\r\n                  {type}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"outline-secondary\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              save({\r\n                name,\r\n                price,\r\n                ipfsImage,\r\n                description,\r\n                ownerAddress: address,\r\n                properties,\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Create NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\n AddNfts.propTypes = {\r\n\r\n  // props passed into this component\r\n  save: PropTypes.func.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AddNfts;\r\n\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\r\nimport {  Button } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../../utils\";\r\nimport Identicon from \"../../ui/Identicon\";\r\n\r\n\r\n  const NftCard = ({           \r\n  facility,\r\n  contractOwner,\r\n  account,\r\n  fundFacility,\r\n  reFundFacility,\r\n  reList,\r\n \r\n  }) => {\r\n  const {image, description, owner, name, index, price, properties, sold } = facility;\r\n\r\n  return (\r\n    <Col key={index}>\r\n      <Card className=\" h-100\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <Identicon address={owner} size={28} />\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(owner)}\r\n            </span>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {price / 10 ** 18} CELO\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\" ratio ratio-4x3\">\r\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\r\n        </div>\r\n\r\n        <Card.Body className=\"d-flex  flex-column text-center\">\r\n          <Card.Title>{name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n          <div>\r\n            <Row className=\"mt-2\">\r\n              {properties?.map((property) => (\r\n                <Col key={index}>\r\n                  <div className=\"border rounded bg-light\">\r\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\r\n                      {property.trait_type}\r\n                    </div>\r\n                    <div className=\"text-secondary text-capitalize font-monospace\">\r\n                      {property.value}\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          </div>\r\n          {contractOwner === account ? (\r\n             <React.Fragment>\r\n            <p className=\"text-success fw-lighter large text-capitalize\">Dapp Administrator</p>\r\n              <p className=\"text-primary fw-lighter large \">Use the + button to mint more eduFundNFTs</p>\r\n              </React.Fragment>\r\n              \r\n          ) : !sold && contractOwner !== account? (\r\n            <Button variant=\"primary\" onClick={fundFacility}>\r\n              Fund Facility\r\n            </Button>\r\n            ): contractOwner !== account && account !== owner && sold ? \r\n             (<Button variant=\"primary\" onClick={reFundFacility}>\r\n             Re-fund Facility\r\n           </Button>\r\n          ) : account === owner  && sold ? (\r\n            <Button variant=\"outline-danger\" onClick={reList}>\r\n            Re-list\r\n            </Button>\r\n          ) : (\r\n            <Button variant=\"outline-danger\" disabled>\r\n              SOLD\r\n            </Button>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\n\r\nNftCard.propTypes = {\r\n  // props passed into this component\r\n  facility: PropTypes.instanceOf(Object).isRequired,\r\n};\r\nexport default NftCard;\r\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ethers } from \"ethers\";\r\nimport PropTypes from \"prop-types\";\r\nimport AddNfts from \"./Add\";\r\nimport NftCard from \"./Card\";\r\nimport Loader from \"../../ui/Loader\";\r\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\r\nimport {\r\n  getFacility,\r\n  fundFacility,\r\n  reList,\r\n  createFacility,\r\n  getContractOwner,\r\n} from \"../../../utils/minter\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst NftList = ({ minterContract, name }) => {\r\n  /* performActions : used to run smart contract interactions in order\r\n   *  address : fetch the address of the connected wallet\r\n   */\r\n  const { performActions, address, kit } = useContractKit();\r\n  const [facilities, setFacilities] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [nftOwner, setNftOwner] = useState(null);\r\n  const { defaultAccount } = kit;\r\n  const getTotalFacility = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // fetch all nfts from the smart contract\r\n      const allFacility = await  getFacility(minterContract);\r\n      if (!allFacility) return;\r\n      setFacilities(allFacility);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [minterContract]);\r\n\r\n  const addNft = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // create an nft functionality\r\n      await createFacility(minterContract, performActions, data);\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getTotalFacility();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n   const fund = async (index, tokenId) => {\r\n    try {\r\n      setLoading(true);\r\n      await fundFacility(minterContract, index, tokenId, performActions);\r\n      toast(<NotificationSuccess text=\"Funding an EduFundNFT....\" />);\r\n      getTotalFacility();\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n     const listAgain = async (index,price) => {\r\n    try {\r\n      setLoading(true);\r\n      const _price = ethers.utils.parseUnits(String(price), \"ether\");\r\n      await reList(minterContract, index,_price, performActions);\r\n      toast(<NotificationSuccess text=\"Re-listing an EdufundNFT....\" />);\r\n      getTotalFacility();\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  //  const refundNFT = async (index, tokenId) => {\r\n  //   try {\r\n  //     setLoading(true);\r\n  //     await fundFacility(minterContract, index, tokenId, performActions);\r\n  //     toast(<NotificationSuccess text=\"Re-funding an EduFundNFT....\" />);\r\n  //     getTotalFacility();\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n\r\n\r\n  const getOwner = useCallback(async (minterContract) => {\r\n    // get the address that deployed the NFT contract\r\n    const address = await getContractOwner(minterContract);\r\n    setNftOwner(address);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (address && minterContract) {\r\n        getTotalFacility();\r\n        getOwner(minterContract);\r\n      }\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, [minterContract, address, getTotalFacility, getOwner]);\r\n  if (address) {\r\n    return (\r\n      <>\r\n      {console.log(nftOwner, address)}\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\r\n\r\n              {nftOwner === address ? (\r\n                <AddNfts save={addNft} address={address} />\r\n              ) : null}\r\n            </div>\r\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\r\n              {/* display all NFTs */}\r\n              {facilities.map((facility) => (\r\n                <NftCard\r\n                  key={facility.index}\r\n                  account={defaultAccount}\r\n                  contractOwner={nftOwner}\r\n                  fundFacility={() => fund( facility.tokenId)}\r\n                  reFundFacility={() => fund( facility.tokenId)}\r\n                  reList={() => listAgain(facility.tokenId,facility.price)}\r\n                  facility={{\r\n                    ...facility,     \r\n                  }}\r\n                />\r\n              ))}\r\n            </Row>\r\n          </>\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nNftList.propTypes = {\r\n  // props passed into this component\r\n  minterContract: PropTypes.instanceOf(Object),\r\n  updateBalance: PropTypes.func.isRequired,\r\n};\r\n\r\nNftList.defaultProps = {\r\n  minterContract: null,\r\n};\r\n\r\nexport default NftList;","import React from \"react\";\nimport Cover from \"./components/Cover\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/wallet\";\nimport { useBalance, useMinterContract } from \"./hooks\";\nimport Nfts from \"./components/minter/nft\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport \"./App.css\";\nimport { Container, Nav } from \"react-bootstrap\";\n\nconst App = function AppWrapper() {\n  /*\n    address : fetch the connected wallet address\n    destroy: terminate connection to user wallet\n    connect : connect to the celo blockchain\n     */\n  const { address, destroy, connect } = useContractKit();\n\n  //  fetch user's celo balance using hook\n  const { balance, getBalance } = useBalance();\n\n  // initialize the NFT mint contract\n  const minterContract = useMinterContract();\n\n  return (\n    <>\n      <Notification />\n\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              {/*display user wallet*/}\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            {/*list NFTs*/}\n            <Nfts\n              name=\"Fund an Educational Facility\"\n              updateBalance={getBalance}\n              minterContract={minterContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        //  if user wallet is not connected display cover page\n        <Cover\n          name=\"Fund an Educational Facility\"\n          coverImg={\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQzQ5CvJIwej7Kg7we_8pa5FI96A2D4LfI-TQ&usqp=CAU\"\n          }\n          connect={connect}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"An Educational NFT\",\n        description: \"A React powered Educational NFT on the  Celo Network\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}